# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Push a new release build to the App Store"
  lane :release do |options|
    profile_name = 'match AppStore com.missionhub'
    submit_for_review = options.key?(:submit) && options[:submit] || false
    automatic_release = options.key?(:auto_release) && options[:auto_release] || false
    version_number = get_version_number(
        target: 'MissionHub'
    )

    if options.key?(:version)
      version_number = increment_version_number(
          version_number: options[:version] # Automatically increment major version number
      )
    end

    build_number = cru_increment_build_number

    automatic_code_signing(
        use_automatic_signing: false,
        profile_name: profile_name
    )

    cru_fetch_certs

    cru_build_app(export_method: 'app-store', profile_name: profile_name)

    upload_to_app_store(
        app_identifier: 'com.missionhub',
        ipa: './MissionHub.ipa',
        skip_screenshots: true,
        skip_metadata: true,
        app_version: version_number,
        automatic_release: automatic_release,
        submit_for_review: submit_for_review,
    )

    cru_update_commit(message: "[skip ci] Version number bump to #{version_number}, Build number bump to ##{build_number}")

    cru_notify_users("MissionHub iOS Release Build #{version_number} (#{build_number}) submitted to App Store.")

    if submit_for_review
      cru_notify_users("Build has been submitted for review and will be #{automatic_release ? 'automatically' : 'manually'} released.")
    end
  end

  desc "Push a new (beta) release build to Crashlytics"
  lane :beta do |options|
    profile_name = 'match AdHoc org.cru.godtools'

    build_number = cru_increment_build_number

    automatic_code_signing(
        use_automatic_signing: false,
        profile_name: profile_name
    )

    cru_fetch_certs

    cru_build_app(export_method: 'ad-hoc', profile_name: profile_name)

    crashlytics(
        crashlytics_path: "./Pods/Crashlytics",
        ipa_path: "./godtools.ipa",
        groups: 'god-tools-ios',
        notes: 'Beta build for GodTools iOS. See Jira board for issues that are "Ready for QA"'
    )

    cru_notify_users(message: "GodTools iOS Beta Build ##{build_number} released to Crashlytics.")
  end

  lane :cru_increment_build_number do
    build_number = ENV["TRAVIS_BUILD_NUMBER"] || get_build_number.to_i + 1

    increment_build_number(
        build_number: build_number
    )

    build_number
  end

  lane :cru_build_app do |options|
    cocoapods(
        podfile: './Podfile'
    )

    gym(
        scheme: "GodTools",
        export_method: options[:export_method],
        export_options: {
            provisioningProfiles: {
                'org.cru.godtools' => options[:profile_name]
            }
        }
    )
  end

  lane :cru_fetch_certs do
    # Travis requires a keychain to be created to store the certificates in, however
    # using this utility to create a keychain locally will really mess up local keychains
    # and is not required for a successful build
    if is_ci?
      create_keychain(
          name: ENV["MATCH_KEYCHAIN_NAME"],
          password: ENV["MATCH_PASSWORD"],
          default_keychain: true,
          unlock: true,
          timeout: 3600,
          add_to_search_list: true
      )

      match(readonly: true,
            keychain_name: ENV["MATCH_KEYCHAIN_NAME"],
            keychain_password: ENV["MATCH_PASSWORD"])
    else
      # Locally match will prompt on the first run for the "MATCH_PASSWORD" and remember it
      # in the environment after that.
      match(readonly: false)
    end
  end

  lane :cru_update_commit do |options|
    clean_build_artifacts

    if is_ci?
      travis_branch = ENV["TRAVIS_BRANCH"]

      sh('git', 'checkout', travis_branch)
    end

    commit_version_bump(
        xcodeproj: 'godtools.xcodeproj',
        message: options[:message]
    )

    push_to_git_remote
  end

  lane :cru_notify_users do |options|
    hipchat(
        message: options[:message],
        channel: "GodTools",
        version: "2",
        custom_color: "green"
    )
  end

end

