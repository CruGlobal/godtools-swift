# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.98.0"

default_platform :ios

platform :ios do
	
	before_all do |lane, options|

		@run_once_before_all ||= begin
			if options.key?(:setup_fastfile_path)
				import(options[:setup_fastfile_path])
			else
				import_from_git(url: 'git@github.com:CruGlobal/mobile-deployment-config.git',
				                path: 'ios/Fastfile')
			end

			if is_ci
				cru_remote_setup(options)
			else
				cru_local_setup(options)
			end

			true
		end

	end

	desc "Runs all the tests - can take skip_install_dependencies and setup_fastfile_path to improve speed if you have the setup Fastfile already checked out. e.g. `bundle exec fastlane run_tests skip_install_dependencies:true setup_fastfile_path:/path/to/common/Fastfile --env test` (path must be relative to this project's main Fastfile)"
	lane :run_tests do

		run_all_tests_and_generate_reports

	end

	# We use a method instead of a lane for defining tests so we don't clean up too many times
	def run_all_tests_and_generate_reports

		if is_ci
			clear_derived_data
		end

		scan(
				workspace: "godtools.xcworkspace",
				scheme: "godtoolsTests",
				code_coverage: true
		)

		xcov(
				workspace: "godtools.xcworkspace",
				scheme: "godtoolsTests"
		)

	end

	desc "Creates a beta build - can take skip_tests, skip_install_dependencies and setup_fastfile_path to improve speed if you have the setup Fastfile already checked out. e.g. `bundle exec fastlane beta skip_tests:true skip_install_dependencies:true setup_fastfile_path:/path/to/common/Fastfile --env beta` (path must be relative to this project's main Fastfile)"
	lane :beta do |options|

		if ENV["GIT_BRANCH"].to_s.length > 0
			Actions.sh("git checkout #{ENV["GIT_BRANCH"]}", log: true)
			Actions.sh("git pull", log: true)
		end

		sigh(
			 adhoc: true,
			 force: true
		   )

		# use the UDID of the newly created provisioning profile
		ENV["PROFILE_UUID"] = lane_context[SharedValues::SIGH_UDID]

		run_all_tests_and_generate_reports unless options.key?(:skip_tests)

		increment_version_number(
			bump_type: "patch"
		)
		increment_build_number

		gym(
			configuration: "Release",
			xcargs: "ARCHIVE=YES", # Used to tell the Fabric run script to upload dSYM file
			use_legacy_build_api: true # Used to fix issue with the SwiftSupport folder not being added to the ipa by xcodebuild on swift projects
		)

		lane_context[SharedValues::FL_CHANGELOG] = IO.read("#{ENV['CRU_PROJECT_ROOT_DIRECTORY']}/release_notes") || ''

		crashlytics(
			groups: [ ENV["CRASHLYTICS_GROUP"] ]
		)

		sigh(force: true)

		resign

		testflight(
			distribute_external: true,
			skip_waiting_for_build_processing: true
		)

		clean_build_artifacts
		commit_version_bump(
			xcodeproj: "godtools.xcodeproj",
			message: "Build number bump for Beta build #{lane_context[SharedValues::BUILD_NUMBER]}",
		)
		add_git_tag
		push_to_git_remote(
			local_branch: ENV['GIT_BRANCH'] || git_branch
		)

		cru_instant_message(
			message: "Beta build #{lane_context[SharedValues::BUILD_NUMBER]} released via Crashlytics"
		)

	end

	desc "Deploy a new version to the App Store - can take skip_tests, skip_install_dependencies and setup_fastfile_path to improve speed if you have the setup Fastfile already checked out. e.g. `bundle exec fastlane production skip_tests:true skip_install_dependencies:true setup_fastfile_path:/path/to/common/Fastfile --env production` (path must be relative to this project's main Fastfile)"
	lane :production do |options|

		if ENV["GIT_BRANCH"].to_s.length > 0
			Actions.sh("git checkout #{ENV["GIT_BRANCH"]}", log: false)
			Actions.sh("git pull", log: false)
		end

		sigh(force: true)

		ENV["PROFILE_UUID"] = lane_context[SharedValues::SIGH_UDID]

		run_all_tests_and_generate_reports unless options.key?(:skip_tests)

		snapshot

		increment_version_number(
			bump_type: "patch"
		)
		increment_build_number

		gym(
			configuration: "Release",
			xcargs: "ARCHIVE=YES",
			use_legacy_build_api: true # Used to fix issue with the SwiftSupport folder not being added to the ipa by xcodebuild on swift projects
		)

		appstore(
				screenshots_path: ENV['SNAPSHOT_OUTPUT_DIRECTORY'],
				force: true,
				skip_waiting_for_build_processing: true
		)

		# Tag new release
		clean_build_artifacts
		version = get_version_number(xcodeproj: "JesusFilm.xcodeproj")
		commit_version_bump(
				message: "Build number bump for Appstore release: version #{version} build #{lane_context[SharedValues::BUILD_NUMBER]}",
				xcodeproj: "godtools.xcodeproj"
		)
		add_git_tag(
		  grouping: 'release',
		  build_number: version
		)
		push_to_git_remote(
				local_branch: ENV['GIT_BRANCH'] || git_branch
		)

		cru_instant_message(
			message: "Appstore build has been delivered to Itunes Connect!"
		)

	end

	# You can define as many lanes as you want

	after_all do |lane, options|

		# This block is called, only if the executed lane was successful
		@run_once_after_all ||= begin
			if is_ci
				cru_remote_cleanup
			else
				cru_local_cleanup
				notification(subtitle: "Lane: #{lane}", message: "Successfully built lane!")
			end

			true
		end

	end

	error do |lane, exception|

		UI.error("Error in lane: #{lane}")
		UI.error("Error Message: #{exception.message}")

		if is_ci

			if lane == :beta || lane == :production
				reset_git_repo(
						disregard_gitignore: false,
						force: true
				)
			end

			cru_instant_message(
				message: exception.message,
				success: false
			)

			cru_remote_cleanup

		else
			cru_local_cleanup
			notification(subtitle: "Lane: #{lane}", message: "Error: #{exception.message}")
		end

	end

	# helper

	def cru_instant_message(options)

		message = options[:message]
		success = true
		success = options[:success] if options.key?(:success)

		if ENV["SLACK_URL"].to_s.length > 0
			slack(
					message: message,
					success: success
			)
		elsif ENV["HIPCHAT_API_TOKEN"].to_s.length > 0
			hipchat(
					message: message,
					success: success
			)
		end

	end

end

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/docs/Actions.md
