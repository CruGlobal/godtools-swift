# Customise this file, documentation can be found here:
# https://docs.fastlane.tools
# All available actions: https://docs.fastlane.tools/actions/
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

opt_out_usage

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.35.0"

default_platform :ios

platform :ios do
  
  
  
########### LANE SETUP ###########
  
  

  before_all do |lane, options|

    @run_once_before_all ||= begin
      if options.key?(:setup_fastfile_path)
        import(options[:setup_fastfile_path])
      else
        import_from_git(url: 'git@github.com:CruGlobal/mobile-deployment-config.git',
                        path: 'ios/Fastfile')
      end
      
      options[:project_name] = "godtools"

      if is_ci
        cru_remote_setup(options)
      else
        cru_local_setup(options)
      end

      true
    end

  end



########### TESTS ###########



  desc "Runs all the tests"
  desc "can take skip_install_dependencies and setup_fastfile_path to improve speed if you have the setup Fastfile already checked out."
  desc "e.g. `bundle exec fastlane run_tests skip_install_dependencies:true setup_fastfile_path:/path/to/common/Fastfile --env test`"
  desc "(Note: the Fastfile path must be relative to this project's main Fastfile)"
  lane :run_tests do

    run_all_tests_and_generate_reports

  end

  # We use a method instead of a lane for defining tests so we don't clean up too many times
  def run_all_tests_and_generate_reports

    if is_ci
      clear_derived_data
    end

    scan(workspace: "godtools.xcworkspace", scheme: "godtools", code_coverage: true, devices: ["iPhone 7"])
    xcov(workspace: "godtools.xcworkspace", scheme: "godtools", only_project_targets: true)

  end



########### BETA ###########



  desc "Creates a beta build"
  desc "can take skip_tests, skip_install_dependencies and setup_fastfile_path to improve speed if you have the setup Fastfile already checked out."
  desc "e.g. `bundle exec fastlane beta skip_tests:true skip_install_dependencies:true setup_fastfile_path:/path/to/common/Fastfile --env beta`"
  desc "(Note: the Fastfile path must be relative to this project's main Fastfile)"
  lane :beta do |options|

    cru_git_setup

    run_all_tests_and_generate_reports unless options.key?(:skip_tests)
    
    increment_build_number

    deploy_to_crashlytics

    deploy_to_testflight

    update_app_identifier(xcodeproj: "godtools.xcodeproj", plist_path: "godtools/Info.plist", app_identifier: "org.cru.godtools.beta")

    clean_build_artifacts
    commit_version_bump(xcodeproj: "godtools.xcodeproj",
                        message: "Build number bump for Beta build #{lane_context[SharedValues::BUILD_NUMBER]}",
                        force: true)
    add_git_tag
    push_to_git_remote(local_branch: ENV['GIT_BUILD_NUMBER_BRANCH'] || git_branch,
                       force: true)
    create_pull_request(repo: "CruGlobal/godtools-swift",
                        title: "Build Number Bump - #{lane_context[SharedValues::BUILD_NUMBER]}",
                        head: ENV['GIT_BUILD_NUMBER_BRANCH'],
                        base: ENV['GIT_BRANCH'],
                        body: "Automatically generated by build server during last beta build. MUST BE MERGED BEFORE ALL OTHER PRs!")

    cru_instant_message(message: "Beta build #{lane_context[SharedValues::BUILD_NUMBER]} released via Crashlytics")

  end

  def deploy_to_crashlytics
    
    update_app_identifier(xcodeproj: "godtools.xcodeproj", plist_path: "godtools/Info.plist", app_identifier: "org.cru.godtools.beta")
    
    sigh(app_identifier: "org.cru.godtools.beta",  adhoc: true, force: true)
    ENV["PROFILE_UUID"] = lane_context[SharedValues::SIGH_UDID] # store UUID of provision profile generated by sigh for use in xcode project
    
    gym(
      configuration: "Release",
      xcargs: "ARCHIVE=YES", # Used to tell the Fabric run script to upload dSYM file
      export_method: "ad-hoc",
      build_path: "#{ENV['CRU_OUTPUT_DIRECTORY']}/builds/fabric",
      output_directory: "#{ENV['CRU_OUTPUT_DIRECTORY']}/builds/fabric"
    )

    crashlytics(notes_path: "#{ENV['CRU_PROJECT_ROOT_DIRECTORY']}/release_notes",
                groups: [ ENV["CRASHLYTICS_GROUP"] ])
    
  end

  def deploy_to_testflight
    
    update_app_identifier(xcodeproj: "godtools.xcodeproj", plist_path: "godtools/Info.plist", app_identifier: "org.cru.godtools")
    
    sigh(app_identifier: "org.cru.godtools", force: true)
    ENV["PROFILE_UUID"] = lane_context[SharedValues::SIGH_UDID] # store UUID of provision profile generated by sigh for use in xcode project
                               
    gym(
      configuration: "Release",
      xcargs: "ARCHIVE=YES", # Used to tell the Fabric run script to upload dSYM file
      export_method: "app-store",
      build_path: "#{ENV['CRU_OUTPUT_DIRECTORY']}/builds/testflight",
      output_directory: "#{ENV['CRU_OUTPUT_DIRECTORY']}/builds/testflight",
      clean: true
    )
       
    testflight(distribute_external: true, skip_waiting_for_build_processing: true)
    
  end



########### PRODUCTION ###########



  desc "Deploy a new version to the App Store"
  desc "can take skip_tests, skip_install_dependencies and setup_fastfile_path to improve speed if you have the setup Fastfile already checked out."
  desc "e.g. `bundle exec fastlane production skip_tests:true skip_install_dependencies:true setup_fastfile_path:/path/to/common/Fastfile --env production`"
  desc "(path must be relative to this project's main Fastfile)"
  lane :production do |options|

    cru_git_setup

    update_app_identifier(xcodeproj: "godtools.xcodeproj", plist_path: "godtools/Info.plist", app_identifier: "org.cru.godtools")

    sigh(force: true)
    ENV["PROFILE_UUID"] = lane_context[SharedValues::SIGH_UDID] # store UUID of provision profile generated by sigh for use in xcode project

    run_all_tests_and_generate_reports unless options.key?(:skip_tests)

    snapshot

    increment_build_number

    gym(
      configuration: "Release",
      xcargs: "ARCHIVE=YES",
      export_method: "app-store"
    )

    appstore(
      screenshots_path: ENV['SNAPSHOT_OUTPUT_DIRECTORY'],
      force: true,
      skip_waiting_for_build_processing: true
    )

    # Tag new release
    clean_build_artifacts
    version = get_version_number(xcodeproj: "godtools.xcodeproj")
    commit_version_bump(xcodeproj: "godtools.xcodeproj",
                        message: "Build number bump for Appstore release: version #{version} build #{lane_context[SharedValues::BUILD_NUMBER]}",
                        force: true)
    add_git_tag(grouping: 'release', build_number: version)
    push_to_git_remote(local_branch: ENV['GIT_BUILD_NUMBER_BRANCH'] || git_branch,
                       force: true)
    create_pull_request(repo: "CruGlobal/godtools-swift",
                        title: "Build Number Bump - #{lane_context[SharedValues::BUILD_NUMBER]}",
                        head: ENV['GIT_BUILD_NUMBER_BRANCH'],
                        base: ENV['GIT_BRANCH'],
                        body: "Automatically generated by build server during last production build. MUST BE MERGED BEFORE ALL OTHER PRs!")

    cru_instant_message(message: "Appstore build has been delivered to Itunes Connect!")

  end



########### LANE CLEANUP ###########



  after_all do |lane, options|

    # This block is called, only if the executed lane was successful
    @run_once_after_all ||= begin
      if is_ci
        cru_remote_cleanup
      else
        cru_local_cleanup
        notification(subtitle: "Lane: #{lane}", message: "Successfully built lane!")
      end

      true
    end

  end

  error do |lane, exception|

    UI.error("Error in lane: #{lane}")
    UI.error("Error Message: #{exception.message}")

    if is_ci

      if lane == :beta || lane == :production
        reset_git_repo(
          disregard_gitignore: false,
          force: true
        )
      end

      cru_instant_message(
        message: "Build Failed because: #{exception.message}<br /><a href=\"#{ENV['JOB_URL']}#{ENV['BUILD_ID']}/console\">#{ENV['JOB_URL']}#{ENV['BUILD_ID']}/console</a>",
        success: false
      )

      cru_remote_cleanup

    else
      cru_local_cleanup
      notification(subtitle: "Lane: #{lane}", message: "Error: #{exception.message}")
    end

  end



########### HELPERS ###########



  def cru_instant_message(options)

    message = options[:message]
    success = true
    success = options[:success] if options.key?(:success)

    if ENV["SLACK_URL"].to_s.length > 0
      slack(
        message: message,
        success: success
      )
    elsif ENV["HIPCHAT_API_TOKEN"].to_s.length > 0
      hipchat(
        from: "Cru Mobile Build Server",
        message: message,
        success: success
      )
    end

  end

  def cru_git_setup
    build_number = get_build_number(xcodeproj: "godtools.xcodeproj").to_i + 1
    ENV["GIT_BUILD_NUMBER_BRANCH"] = "build-number-bump-#{build_number}"
    Actions.sh("git checkout -B -f #{ENV["GIT_BUILD_NUMBER_BRANCH"]}", log: false)
  end

end
