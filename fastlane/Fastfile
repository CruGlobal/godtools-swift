import_from_git(
    url: "https://github.com/CruGlobal/cru-fastlane-files",
    branch: "develop",
    path: "Fastfile"
)

# First updates the xcode project code signing settings for each provided target, setting automatic code signing to false and setting the provisioning profile name.
# Then uses match to fetch certificates from a git storage and adds them to the xcode project based on code signing settings.
#
# fastlane action: https://docs.fastlane.tools/actions/update_code_signing_settings/
# fastlane action: https://docs.fastlane.tools/actions/create_keychain/
# fastlane action: https://docs.fastlane.tools/actions/match/
# fastlane action: https://docs.fastlane.tools/actions/gym/
# fastlane action: https://docs.fastlane.tools/actions/testflight/
#
# options:
# - api_key_path: Path to your App Store Connect API Key JSON file. Required for match.
# - apple_id_username: Your Apple ID Username. 
# - app_release_bundle_identifier: The bundle identifier for your xcode release configuration.
# - code_signing_app_bundle_ids: Comma separated string of bundle ids that require code signing.  This comma separated list should match up with the code signing provisioning profile names and targets.
# - code_signing_provisioning_profile_names: Comma separated string of provisioning profile names that require code signing.  This comma separated list should match up with the code signing app bundle ids and targets.
# - code_signing_targets: Comma separated string of targets that require code signing.  This comma separated list should match up with the code signing app bundle ids and provisioning profile names.
# - deploy_type: 
# - is_running_in_ci: If running fastlane from CI, this is used to create a keychain needed for match.  Local fastlane builds should not need to set this.
# - match_git_branch:
# - match_git_url:
# - match_keychain_name:
# - team_id: The ID of your App Store Connect team.
#
lane :cru_shared_lane_build_and_deploy do |options|

    # Update code signing settings

    api_key_path = options[:api_key_path] || ENV["APP_STORE_CONNECT_API_KEY_JSON_FILE_PATH"]
    apple_id_username = options[:apple_id_username] || ENV["APPLE_ID_USERNAME"]
    app_release_bundle_identifier = options[:app_release_bundle_identifier] || ENV["APP_RELEASE_BUNDLE_IDENTIFIER"]
    code_signing_app_bundle_ids = options[:code_signing_app_bundle_ids] || ENV["CODE_SIGNING_APP_BUNDLE_IDS"]
    code_signing_provisioning_profile_names = options[:code_signing_provisioning_profile_names] || ENV["CODE_SIGNING_PROVISIONING_PROFILE_NAMES"]
    code_signing_targets = options[:code_signing_targets] || ENV["CODE_SIGNING_TARGETS"]
    is_running_in_ci = options[:is_running_in_ci] || false
    match_git_branch = options[:match_git_branch] || ENV["MATCH_GIT_BRANCH"]
    match_git_url = options[:match_git_url] || ENV["MATCH_GIT_URL"]
    match_keychain_name = options[:match_keychain_name] || ENV["MATCH_KEYCHAIN_NAME"]
    team_id = options[:team_id] || ENV["APPLE_DEVELOPER_TEAM_ID"]

    app_bundle_ids_array = code_signing_app_bundle_ids.split(",")
    profile_names_array = code_signing_provisioning_profile_names.split(",")
    targets_array = code_signing_targets.split(",")

    targets_array.each_with_index do |target, index|

        profile_name = profile_names_array[index]

        puts "update code signing for target: #{target}, profile_name: #{profile_name}"

        update_code_signing_settings(
            use_automatic_signing: false, 
            targets: target,
            profile_name: profile_name
        )
    end

    # Create Keychain needed for CI.

    if is_running_in_ci
        
        puts "creating keychain for ci..."
        
        create_keychain(
          name: match_keychain_name,
          password: ENV["MATCH_PASSWORD"],
          default_keychain: true,
          unlock: true,
          timeout: 3600,
          add_to_search_list: true
        )
    else z

        puts "skipping create keychain..."
    end

    # Match - Release

    match(
        api_key_path: api_key_path,
        app_identifier: app_bundle_ids_array,
        git_basic_authorization: Base64.strict_encode64(ENV["MATCH_GIT_BASIC_AUTHORIZATION_PAT"]),
        git_branch: match_git_branch,
        git_url: match_git_url,
        keychain_name: match_keychain_name,
        keychain_password: ENV["MATCH_PASSWORD"],
        platform: "ios",
        storage_mode: "git",
        type: "appstore",
        username: apple_id_username
    )

    # Gym - Release

    release_ipa_path = gym(
        scheme: ENV["GYM_RELEASE_SCHEME"],
        export_method: "app-store",
        export_options: {
            provisioningProfiles: {
                ENV["GYM_RELEASE_APP_BUNDLE_IDENTIFIER"] => ENV["GYM_RELEASE_PROVISIONING_PROFILE"]
            }
        }
    )

    # TestFlight - Release

    testflight(
        app_identifier: app_release_bundle_identifier,
        dev_portal_team_id: team_id,
        ipa: release_ipa_path,
        skip_waiting_for_build_processing: true,
        username: apple_id_username
    )

    #TODO: Implement.
    #cru_notify_users(message: "#{target} iOS Beta Build ##{build_number} released to TestFlight.")
end